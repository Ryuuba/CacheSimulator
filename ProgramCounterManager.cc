#include "ProgramCounterManager.h"

ProgramCounterManager::ProgramCounterManager() {
    instructionNumber = 10;
    pc = 0;
    branchProbability = 0.05;
    ramSize = 1024;
    /** Object transforming sequences of numbers generated by a generator 
      * into sequences of numbers that follow certain distribution. */
    bernoulliDistribution = new std::bernoulli_distribution(branchProbability);
    discreteRandomDistribution = new std::uniform_int_distribution<unsigned>(0, ramSize-1);
}

ProgramCounterManager::ProgramCounterManager(const char* filename) {
    //TODO: Read attrimCounterutes from a file
}

ProgramCounterManager::~ProgramCounterManager() {
    if (bernoulliDistribution)
        delete bernoulliDistribution;
    if (discreteRandomDistribution)
        delete discreteRandomDistribution;
}

unsigned ProgramCounterManager::getPC(std::minstd_rand0& rng) {
    pc++;
    if ((*bernoulliDistribution)(rng) || pc >= ramSize)
        pc = (*discreteRandomDistribution)(rng);
    instructionNumber--;
    return pc;
}

unsigned ProgramCounterManager::getInstructionNumber() {
    return instructionNumber;
}
